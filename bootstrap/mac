#!/usr/bin/env zsh
#
# Idempotently set up macOS
#

[[ "$OSTYPE" == *'arwin'* ]] || exit 1

# ============================================================================
# initialize script and dependencies
# ============================================================================

if [[ -z "$DOTFILES" ]]; then
  cd -- "$(dirname "$0")/.." || exit 1
  DOTFILES="$PWD"
fi
. "${DOTFILES}/lib/helpers.sh"
. "${DOTFILES}/lib/pretty.bash"
export PATH="${DOTFILES}/bin:${PATH}"

# ============================================================================
# check prereqs
# ============================================================================

__dko_require 'brew' || exit 1
__dko_require 'xcrun' || exit 1

"${DOTFILES}/bootstrap/symlink" || exit 1
"${DOTFILES}/bootstrap/cleanup" || exit 1

dotfiles_plist="${HOME}/Library/LaunchAgents/dotfiles.plist"
if [ ! -f "$(readlink "$dotfiles_plist")" ]; then
  __dko_err "dotfiles.plist not symlinked. Run bootstrap/symlink!"
  exit 1
fi

# ============================================================================
# sdks
# ============================================================================

_bootstrap_sdks() {
  local clitools="/Library/Developer/CommandLineTools"
  [ -d "$clitools" ] &&
    __dko_status "Found CLI tools. If headers are missing, try deleting ${clitools} and redownload with xcode-seelct --install"

  # See https://github.com/pyenv/pyenv/issues/1219#issuecomment-428700763
  # Xcode Command Line tools no longer installs needed headers in /include
  # https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes
  local sdk
  sdk=$(xcrun --show-sdk-path)
  if [ ! -d "$sdk" ]; then
    local product_version
    product_version="$(sw_vers -productVersion)"

    local product_minor
    product_minor="${product_version%.*}"

    local headers_pkg="${clitools}/Packages/macOS_SDK_headers_for_macOS_${product_minor}.pkg"
    if [ ! -f "$headers_pkg" ]; then
      __dko_err "Incomplete installation of xcode command line tools detected."
      __dko_err_ "Download from https://developer.apple.com/download/more/"
      return 1
    fi

    __dko_status "Installing SDK headers..."
    sudo installer -allowUntrusted -verbose -pkg "$headers_pkg" -target / || {
      __dko_warn "Could not install SDK headers"
    }
  else
    __dko_ok "Found SDK headers"
  fi
}
__dko_status "Re-bootstrapping SDKs (required to install python on 10.14+)"
_bootstrap_sdks || exit 1

# ============================================================================
# plist
# ============================================================================

__dko_status "Reloading dotfiles.plist"
launchctl unload "$dotfiles_plist" 2>/dev/null
launchctl load "$dotfiles_plist"

# ============================================================================
# zsh fixes
# ============================================================================

# See https://github.com/postmodern/chruby/issues/196#issuecomment-23826171
if [ -f /etc/zshenv ] && [ ! -f /etc/zprofile ]; then
  __dko_status "Moving /etc/zshenv to /etc/zprofile"
  sudo mv /etc/zshenv /etc/zprofile
else
  __dko_ok "/etc/zshenv not present"
fi

# ============================================================================
# vendor
# ============================================================================

__dko_status "Brewing"
[ -z "$DKO_BREW_PREFIX" ] && . "${DOTFILES}/shell/os-darwin.zsh"
# prefer homebrew/cask-fonts
brew untap caskroom/fonts 2>/dev/null
(cd "${DOTFILES}/mac" && TERM=xterm256-color \brew bundle;)

__dko_status "Installing fzf shell extensions"
"${DOTFILES}/bin/dot" fzf

# ============================================================================
# use zsh
# the /etc/shells method is for TTY users, Darwin can just read from dscl
# https://rick.cogley.info/post/use-homebrew-zsh-instead-of-the-osx-default/
# ============================================================================

_bootstrap_shell() {
  local usershell
  local zshpath
  __dko_status "Setting user shell to brewed zsh using dscl"

  zshpath="${DKO_BREW_PREFIX}/bin/zsh"
  [ -x "$zshpath" ] || return 1

  usershell="$(dscl . -read "/Users/${USER}" UserShell)"
  if [[ "$usershell" != "UserShell: ${zshpath}" ]]; then
    __dko_ok "Already using brewed zsh"
  else
    sudo dscl . -create "/Users/${USER}" UserShell "${zshpath}"
  fi
}
_bootstrap_shell || {
  __dko_warn "Could not update the user's shell to ${zshpath}"
  __dko_warn_ "Check the brew installation and refer to"
  __dko_warn_ "https://rick.cogley.info/post/use-homebrew-zsh-instead-of-the-osx-default/"
}

# ============================================================================

__dko_status "Restart your terminal"
